"""
bucles_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k4X00kDdHgQWEAmKIQ4cBeUvLrj-Hom8

# **Bucles** en Python: *while* y *for* con sus variantes
"""

#   1. while básico
# Ejecuta un bloque mientras la condición sea verdadera.
contador = 0 #Iniciamos una var de control

while contador < 5: #Condición del bloque
  print(f"Contador: {contador}") #Cuerpo del bucle
  contador += 1 #Evitamos bucle infinito

"""
Explicación línea por línea:
  1. Inicializamos 'contador' en 0
  2. while evalúa si contador < 5 (True en primera iteración)
  3. Imprime el mensaje con el valor actual
  4. Incrementa contador en 1
  5. Repite desde el paso 2 hasta que contador sea 5 
  (entonces la condición es False)
"""

#   2. while con break
# Permite salir anticipadamente del bucle.
numero = 10

while numero > 0: # Condición del bucle
  print(f"Número actual: {numero}")
  numero -= 1 # Decrementamos el número

"""
Explicación:
  1. while numero > 0 crea un bucle que se ejecuta *mientras* el numero 
  sea mayor que 0.
  2. Imprime el número actual
  3. Reduce el número en 1
  4. Si el numero = 0, se imprime que llegamos a 0 y termina el bucle.
"""

#   3. while con continue
# Salta a la siguiente iteración.
contador = 0

while contador < 10:
  contador += 1

  if contador % 2 == 0: # Si es par
    continue # Salta al siguiente ciclo
  print(f"Número impar: {contador}") # Solo se ejecuta para impares

"""
Explicación:
  1. Inicializamos contador
  2. while se ejecuta mientras contador < 10
  3. Incrementa contador
  4. Si es par (divisible por 2), continue salta a la siguiente iteración
  5. Solo los impares llegan al print
"""

#   4. while con else
# El bloque else se ejecuta cuando la condición del while es False.
intentos = 3

while intentos > 0:
  print(f"Intentos restantes: {intentos}")
  intentos -= 1
else:
  print("Se agotaron los intentos") # Se ejecuta cuando while termina normalmente

"""
Explicación:
  1. while se ejecuta 3 veces (intentos = 3, 2, 1)
  2. En cada iteración muestra intentos y los reduce
  3. Cuando intentos llega a 0, la condición es False y se ejecuta el else
"""

## BUCLES FOR
#   1. for básico con lista
# Itera sobre elementos de una secuencia.
frutas = ['manzana', 'banana', 'naranja', 'pera']

for fruta in frutas: # Itera sobre cada elemento
  print(f"Me gusta la {fruta}")

"""
Explicación:
  1. frutas es una lista con 4 elementos
  2. for toma cada elemento uno por uno y lo asigna a la variable fruta
  3. Imprime un mensaje con cada fruta
"""

#   2. for con *range*
# Para ejecutar un número determinado de veces.
for i in range(5): # range(5) genera 0, 1, 2, 3, 4
  print(f"Cuenta: {i}")

# También podemos definir inicio, fin y paso
for i in range(2, 11, 2): # 2 hasta 10, de 2 en 2
  print(f"Número par: {i}")

"""
Explicación:
  1. range(5) genera números del 0 al 4
  2. for asigna cada número a i y ejecuta el bloque
  3. Segundo for usa range(2, 10, 2) que genera 2, 4, 6, 8, 10
"""

#   3. *for* con diccionarios
# Iterar sobre claves, valores o ambos.
persona = {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Madrid'}

# Iterar sobre claves
for clave in persona:
  print(f"Clave: {clave}")

# Iterar sobre valores
for valor in persona.values():
  print(f"Valor: {valor}")

# Iterar sobre ambos
for clave, valor in persona.items():
  print(f"{clave}: {valor}")

"""
Explicación:
  1. persona es un diccionario con 3 pares clave-valor
  2. Primer for itera sobre las claves por defecto
  3. Segundo for usa .values() para acceder a los valores
  4. Tercer for usa .items() para obtener ambos
"""

#   4. for con enumerate()
# Obtener índice y valor al iterar
colores = ['rojo', 'verde', 'azul']

for indice, color in enumerate(colores):
  print(f"Color {indice + 1}: {color}")

"""
Explicación:
  1. enumerate(colores) devuelve pares (índice, valor)
  2. for desempaqueta cada par en indice y color
  3. Imprime el índice (empezando en 0) ajustado y el color
"""

#   5. for anidados
# Bucles dentro de bucles.
tabla_multiplicar = []

for i in range(1, 4): # 1 al 3
  fila = []
  for j in range(1, 4): # 1 al 3
    fila.append(i * j)
  tabla_multiplicar.append(fila)
print(tabla_multiplicar) # [[1, 2, 3], [2, 4, 6], [3, 6, 9]]

"""
Explicación:
  1. Primer for (i) itera 1, 2, 3
  2. Para cada i, crea una lista vacía fila
  3. Segundo for (j) itera 1, 2, 3
  4. Multiplica i*j y lo añade a fila
  5. Añade fila completa a tabla_multiplicar
"""

#   6. for con zip()
# Iterar sobre múltiples secuencias simultáneamente.
nombres = ['Ana', 'Juan', 'María']
edades = [25, 30, 28]

for nombre, edad in zip(nombres, edades):
  print(f"{nombre} tiene {edad} años")

"""
Explicación:
  1. zip() combina las listas nombres y edades
  2. for toma un elemento de cada lista en cada iteración
  3. Desempaqueta en nombre y edad
  4. Imprime el mensaje combinado
"""

#   7. for con else
# El bloque else se ejecuta al terminar el bucle (si no hubo break).
numeros = [1, 3, 5, 7, 9,]

for num in numeros:
  if num % 2 == 0:
    print(f"Número par encontrado: {num}")
    break
else:
  print("No se encontraron números pares") # Se ejecuta porque no hubo break

"""
Explicación:
  1. for itera sobre la lista de números impares
  2. La condición if nunca es True (todos son impares)
  3. Como no se ejecutó break, al terminar el for se ejecuta el else
"""
#   8. Comprensión de listas (for compacto)
# Forma concisa de crear listas.
cuadrados = [x**2 for x in range(11)] #[0,1,4,9,16,25,36,49,64,81,100]

# Con condición
pares = [x for x in range(21) if x % 2 == 0] #[0,2,4,6,8,10,12,14,16,18,20]

"""
Explicación:
  1. Primera comprensión: para cada x en 0-9, calcula x al cuadrado
  2. Segunda comprensión: solo incluye x si es par (x % 2 == 0)
"""
